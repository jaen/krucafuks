                                                     ; (or (= nick "firemark") (= realname "tiramo")) (msg from-channel "firemark: siema!")
                                                     #"przywitaj\s+si(e|ę)" (msg from-channel "no witam")
                                                     #"(powiedz|powiesz).*" (let [[_ say-what say-where] (re-find #"(?:powiedz|powiesz)(.*?)(#.*)?$" body)] (smart-say (s/trim say-what) (or say-where from-channel)))
                                                     #"dobry\s*bot!?" (msg from-channel (rand-nth ["^_^" "*_*" ";3" "PURRRR~!"]))
                                                     #"siema!?" (if (> @siema-count (+ 2 (rand-int 3)))
                                                                    (do
                                                                       (.start (Thread. (fn [] (Thread/sleep (+ 30000 (rand-int 30000)))
                                                                                               (rejoin from-channel))))         
                                                                       (reset! siema-count 0)
                                                                       (Thread/sleep (+ 2200 (rand-int 1800)))
                                                                       (vec (flatten [(msg from-channel "a pierdolcie sie wszyscy!") (format "PART %s" from-channel)] )))
                                                                    (do
                                                                       (Thread/sleep (+ 1800 (rand-int 1200)))
                                                                       (swap! siema-count inc)
                                                                       (msg from-channel (rand-nth ["spierdalaj" "pierdol sie" "zamknie morde"]))))
                                                    nil)
                          (re-find #"party([!\.\?]?|\s|$)" body-lowercase)    (msg from-channel (rand-nth ["Party! Party!! PARTY!!!"]))
                          (re-find drunk-regexp body-lowercase) (let [drunk-name ((re-find drunk-regexp body) 1)]
                                                                (if drunk-name
                                                                     (vec (flatten [(msg from-channel drunk-name)
                                                                                    (msg from-channel "spierdalaj!")
                                                                                    (msg from-channel drunk-name)
                                                                                    (msg from-channel "jesteś pijany! SPIERDALAJ!")]))
                                                                     []))))))]
                                                             ;true (msg from-channel (format "%s: %s" nick (rand-nth @talkbacks))))))))]
  (if reply
      (merge-response-map response-map { :inhibit-parrot true :replies {:talkback-reply reply }})
      response-map)))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        (println words ":" where)
        (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 1)) (let [user (some #{(do-declension (split-words 2))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (println (msg where (format "%s: %s" (split-words 0) (s/trim (s/join (drop 1 split-words )))))))))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        (println words ":" where)
        (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 1)) (let [user (some #{(do-declension (split-words 2))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (println (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words )))))))))
(defn rejoin
  [channel]
  (enqueue @global-irc-connection (format "JOIN %s" channel)))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        (println words ":" where)
        (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 1)) (let [user (some #{(do-declension (split-words 2))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words ))))))))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        (println words ":" where)
        (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 1)) (let [user (some #{(do-declension (replace (split-words 2) #"\?|!|\." ""))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words ))))))))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        (println words ":" where)
        (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 0)) (let [user (some #{(do-declension (replace (split-words 1) #"\?|!|\." ""))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words ))))))))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        (println words ":" where)
        (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 0)) (let [user (some #{(do-declension (s/replace (split-words 1) #"\?|!|\." ""))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words ))))))))
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        ; (println words ":" where)
        ; (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 0)) (let [user (some #{(do-declension (s/replace (split-words 1) #"\?|!|\." ""))} @users-online)]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words ))))))))
[0 1 2]
([0 1 2] 0)
([0 1 2] 3)
(in [1 2 3] 0)
(contains? [1 2 3] 0)
(contains? [1 2 3] w)
(contains? [1 2 3] 3)
(= true "")
(first ())
(rest ())
(rest nil)
(float 1.2)
(float (double 1.2))
(float (double 1.2222222222222222222222222))
(double 1.2222222222222222222222222)
(contains? [1 2 3] 3)
(defn smart-say
  [words where]
  (println "smart-say")
  (let [split-words (s/split words #"\s+")]
        ;[lead-part say-part] (partition-by #(some #{(do-declension %)} @users-online) split-words)]
        ;(s/join say-part " ")))
        ; (println words ":" where)
        ; (println (split-words 0) ":" (split-words 1) ":" (drop 2 split-words))
        (cond
          (re-find #"(?i)cos|coś" (split-words 0)) (let [user (if (contains? split-words 1) (some #{(do-declension (s/replace (split-words 1) #"\?|!|\." ""))} @users-online))]
                                                        (if user
                                                            (msg where (format "%s: %s" user (s/trim (rand-nth @parrot-talkbacks))))
                                                            (msg where (s/trim (rand-nth @parrot-talkbacks)))))
          (some #{(do-declension (split-words 0))} @users-online) (msg where (format "%s: %s" (split-words 0) (s/trim (s/join " " (drop 1 split-words ))))))))
(-main)
(has-permission "hAKE5" :kick)
(has-permission "stefan" :kick)
(has-permission "hAKE5" :kick)
2s
@pluspluses
(-main)
@pluspluses
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command 
                (do
                  (println "podaje stan")
                  (merge-response-map response-map { :inhibit-parrot true
                                                   :replies {
                                                     :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                      (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses))))))])}
                                                  :inhibit-talkback true }))
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command 
                (do
                  (println plus-command)
                  (merge-response-map response-map { :inhibit-parrot true
                                                   :replies {
                                                     :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                      (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses))))))])}
                                                  :inhibit-talkback true }))
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command 
                (do
                  (println (s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k))) (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses)))))))
                  (merge-response-map response-map { :inhibit-parrot true
                                                   :replies {
                                                     :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                      (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses))))))])}
                                                  :inhibit-talkback true }))
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command 
                (do
                  (println (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses)))))
                  (merge-response-map response-map { :inhibit-parrot true
                                                   :replies {
                                                     :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                      (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses))))))])}
                                                  :inhibit-talkback true }))
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
@pluspluses
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command 
                (do
                  (println (sort-by last plus-command @pluspluses))
                  (merge-response-map response-map { :inhibit-parrot true
                                                   :replies {
                                                     :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                      (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses))))))])}
                                                  :inhibit-talkback true }))
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
@users-online
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command 
                (do
                  (println (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses)))
                  (merge-response-map response-map { :inhibit-parrot true
                                                   :replies {
                                                     :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                      (take 10 (map first (filter #(contains?  @users-online (last %)) (sort-by last plus-command @pluspluses))))))])}
                                                  :inhibit-talkback true }))
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
@users-online
(filter #(contains? @users-online (last %)) (sort-by last plus-command @pluspluses))
(filter #(contains? @users-online (last %)) (sort-by last < @pluspluses))
(filter #(contains? @users-online (last %)) (sort-by last > @pluspluses))
(map #(last %) (sort-by last < @pluspluses))
(map #(l %) (sort-by last < @pluspluses))
(map #(first %) (sort-by last < @pluspluses))
@users-online
(contains? @users-online "jaen")
(map #(first %) (sort-by last < @pluspluses))
(filter #(contains? @users-online (first %)) (sort-by last > @pluspluses))
(defn count-pluspluses
  [response-map]
  (let [line-data (or (response-map :line-data) {})
        command (line-data :command)
        args (line-data :args)
        from-channel (if (= command "PRIVMSG") (args 0))
        body (and line-data (line-data :body))
        plus-command (if (do (and body (= (directed-at body) (@config :bot-nick))))
                         (cond
                                (not (nil? (re-find #"(stan plus(plus)?(ó|o)w|(plus)?plusy)" body))) >
                                (not (nil? (re-find #"(stan minus(ó|o)w|minusy)" body))) <
                                :else nil))]
        (if (and (= command "PRIVMSG") (some #{from-channel} (@config :bot-join-channels)))
            (do
              (if plus-command
                (merge-response-map response-map { :inhibit-parrot true
                                                 :replies {
                                                   :count-pluspluses-reply (apply msg from-channel [(s/join ", " (map (fn [k] (format "%s: %s" k (@pluspluses k)))
                                                                                                    (take 10 (map first (filter #(contains?  @users-online (first %)) (sort-by last plus-command @pluspluses))))))])}
                                                :inhibit-talkback true })
                (do
                  (let [line-data (or (response-map :line-data) {})
                      body (line-data :body)
                      [nick _] (line-data :from)
                      plusplus-matches (or (and body (re-seq point-regex body)) [])
                      nested-responses (do (map (fn [[_ plussed-nick what]] (if (and (contains? @users-online plussed-nick) (not (= plussed-nick nick)))
                                                                       (do
                                                                         (println @users-online plussed-nick nick)
                                                                         (let
                                                                           [op (cond (= what "++") inc (= what "--") dec)]
                                                                           (swap! pluspluses (fn [{value plussed-nick :as pluspluses}] (assoc pluspluses plussed-nick (op (or value 0))))))
                                                                         [])
                                                                       (if (= plussed-nick nick) [plussed-nick] []))) ; (if (= plussed-nick nick) :selfplus)]))
                                            plusplus-matches))
                      responses (if (empty? nested-responses) [] (reduce into nested-responses))]
                  (do
                    (if (not (empty? responses))
                      (let [self-plusses (filter (fn [[_ sp]] (not (nil? sp))) responses)
                            invalid-plusses (filter (fn [[_ sp]] (nil? sp)) responses)
                            self-plus-reply (if (not (empty? self-plusses)) (msg from-channel (format "%s: tylko Widzew się samoplusuje. Chcesz być jak Widzew?" nick)))
                            invalid-reply (msg from-channel (format "%s: ja, mhm, i jeszcze mi powiesz że %s %s? " nick (apply word-join responses) (if (= 1 (count responses)) "istnieje"  "wszyscy istnieją")))]
                        response-map);(merge-response-map response-map { :replies { :count-pluspluses-reply invalid-reply } }))
                      response-map))))))
            response-map)))
